nextflow_workflow {

    name "Test Subworkflow PREPARE_GENOME"
    script "../main.nf"
    workflow "PREPARE_GENOME"
    config "./nextflow.config"

    test("default options") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("gencode = false") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("skip_gtf_filter") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = true
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("skip_bbsplit") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = true
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("pseudo-alignment only") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("skip_pseudo_alignment") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = true

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("gtf = false") {

        when {
            workflow {
                """
                gencode                  = true
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = false
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("gff = false") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = false
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("gfp = false") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = false
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("transcriptome = false") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = false
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("with bed") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = file(params.pipelines_testdata_base_path + 'reference/ngscheckmate.bed', checkIfExists: true)
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("rsem_index = false") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = false
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("kallisto only") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = false
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("hisat2_index = false") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = false
                input[7] = null
                input[7] = false
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("gencode = true") {

        when {
            workflow {
                """
                gencode                  = true
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("featurecounts_group_type = 'gene_type'") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_type'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("skip_gtf_filter = true") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = true
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("skip_bbsplit = true") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = true
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("pseudo-alignment only") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("skip_pseudoalignment = true") {

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = true

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.transcript_fasta,                    workflow.out.fasta,
                    workflow.out.gtf,
                    workflow.out.fai,
                    workflow.out.gene_bed,
                    workflow.out.chrom_sizes,
                    workflow.out.splicesites,
                    workflow.out.sortmerna_index,
                    workflow.out.star_index,
                    workflow.out.rsem_index,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("default options - stub") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("gencode = false - stub") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("skip_gtf_filter - stub") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = true
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("skip_bbsplit - stub") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = true
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    test("pseudo-alignment only") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("skip_pseudo_alignment - stub") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = true

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("gtf = false - stub") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = true
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = false
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("gff = false - stub") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = false
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("gfp = false - stub") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = false
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("transcriptome = false - stub") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = false
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("with bed - stub") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = file(params.pipelines_testdata_base_path + 'reference/ngscheckmate.bed', checkIfExists: true)
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("rsem_index = false - stub") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = false
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("kallisto only") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = false
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("hisat2_index = false - stub") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = false
                input[7] = null
                input[7] = false
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("gencode = true - stub") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = true
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("featurecounts_group_type = 'gene_type' - stub") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_type'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("skip_gtf_filter = true - stub") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = true
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("skip_bbsplit = true - stub") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = true
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    test("pseudo-alignment only") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = false

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }

    test("skip_pseudoalignment = true - stub") {

        options "-stub"

        when {
            workflow {
                """
                gencode                  = false
                featurecounts_group_type = 'gene_biotype'
                aligner                  = 'star_salmon,star_rsem,hisat2'
                pseudo_aligner           = 'salmon,kallisto'
                skip_gtf_filter           = false
                skip_bbsplit             = false
                skip_sortmerna           = true                skip_pseudo_alignment    = true

                input[0]  = file(params.pipelines_testdata_base_path + 'reference/genome.fasta', checkIfExists: true)
                input[1]  = file(params.pipelines_testdata_base_path + 'reference/genes_with_empty_tid.gtf', checkIfExists: true)
                input[2]  = file(params.pipelines_testdata_base_path + 'reference/genes.gff', checkIfExists: true)
                input[3]  = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                input[4]  = file(params.pipelines_testdata_base_path + 'reference/transcriptome.fasta', checkIfExists: true)
                input[5]  = null
                input[6]  = null
                input[7]  = file(params.pipelines_testdata_base_path + 'reference/bbsplit_fasta_list.txt', checkIfExists: true)
                input[7]  = null
                input[7]  = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/rsem.tar.gz', checkIfExists: true)
                input[7] = file(params.pipelines_testdata_base_path + 'reference/salmon.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = file(params.pipelines_testdata_base_path + 'reference/hisat2.tar.gz', checkIfExists: true)
                input[7] = null
                input[7] = null
                input[7] = gencode
                input[7] = featurecounts_group_type
                input[7] = aligner
                input[7] = pseudo_aligner
                input[7] = skip_gtf_filter
                input[7] = skip_bbsplit
                input[7] = skip_sortmerna
                input[7] = skip_alignment
                input[7] = skip_pseudo_alignment
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out.chrom_sizes,
                    workflow.out.fai,
                    workflow.out.fasta,
                    workflow.out.gene_bed,
                    workflow.out.gtf,
                    workflow.out.hisat2_index,
                    workflow.out.kallisto_index,
                    workflow.out.rsem_index,                    workflow.out.sortmerna_index,
                    workflow.out.splicesites,
                    workflow.out.star_index,
                    workflow.out.transcript_fasta,
                    workflow.out.versions
                ).match() }
            )
        }
    }
}
